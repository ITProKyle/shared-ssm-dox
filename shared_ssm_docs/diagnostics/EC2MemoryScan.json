{
    "schemaVersion": "2.2",
    "description": "Reports back diagnostic information related to memory usage.",
    "parameters": {
        "ResultCount": {
            "type": "String",
            "allowedPattern": "^[0-9]{1,2}$",
            "default": "8",
            "description": "The number of results to return for top processes."
        }
    },
    "mainSteps": [
        {
            "action": "aws:runShellScript",
            "inputs": {
                "runCommand": [
                    "#!/bin/bash -e",
                    "",
                    "# ###################################################################",
                    "# SYNOPSIS",
                    "#   Smart Ticket remediation script for high memory usage.",
                    "#",
                    "# DESCRIPTION",
                    "#   Reports back diagnostic information related to memory usage.",
                    "#   Supported: Yes",
                    "#   Keywords: faws,memory,high,smarttickets",
                    "#   Prerequisites: No",
                    "#   Makes changes: No",
                    "#",
                    "# INPUTS",
                    "#   None",
                    "#",
                    "# OUTPUTS",
                    "#   System information and top process list sorted by RSZ",
                    "#   If sysstat is available, memory utilization and paging statistics",
                    "#   will also be returned",
                    "#",
                    "# ###################################################################",
                    "",
                    "# shellcheck disable=SC1083",
                    "MAX_RESULTS={{ ResultCount }}",
                    "",
                    "function sar_output() {",
                    "  echo \"== Last $MAX_RESULTS Samples ==\"",
                    "  echo \"\"",
                    "  # Get line count, taking away 3 header and 1 footer lines",
                    "  LINE_COUNT=$(sar -r | wc -l)-4",
                    "  OUTPUT_LINES=$(( (MAX_RESULTS > LINE_COUNT ? LINE_COUNT : MAX_RESULTS) + 1 ))",
                    "  sar -r | head -n 3",
                    "  sar -r | tail -n $OUTPUT_LINES",
                    "  echo \"\"",
                    "  # Get line count, taking away 3 header and 1 footer lines",
                    "  LINE_COUNT=$(sar -B | wc -l)-4",
                    "  OUTPUT_LINES=$(( (MAX_RESULTS > LINE_COUNT ? LINE_COUNT : MAX_RESULTS) + 1 ))",
                    "  sar -B | head -n 3",
                    "  sar -B | tail -n $OUTPUT_LINES",
                    "  echo \"\"",
                    "}",
                    "",
                    "",
                    "# Output memory details",
                    "echo \"\"",
                    "free -m",
                    "",
                    "# Output top {{ ResultCount }} processes",
                    "echo \"\"",
                    "echo \"Top $MAX_RESULTS Processes by MEM %\"",
                    "echo \"\"",
                    "ps -eo user,%cpu,%mem,rsz,args | sort -rnk4 | awk 'BEGIN {printf \"%8s\\t%6s\\t%6s\\t%8s\\t%s\\n\",\"USER\",\"%CPU\",\"%MEM\",\"RSZ\",\"COMMAND\"}{printf \"%8s\\t%6s\\t%6s\\t%8s MB\\t%-12s\\n\",$1,$2,$3,$4/1024,$5}' | head -n $(( MAX_RESULTS + 1 ))",
                    "",
                    "# Output last {{ ResultCount }} SAR entries",
                    "echo \"\"",
                    "which sar >/dev/null 2>/dev/null && sar_output || echo 'no sysstat available'"
                ]
            },
            "name": "LinuxMemoryScan",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Linux"
                ]
            }
        },
        {
            "action": "aws:runPowerShellScript",
            "inputs": {
                "runCommand": [
                    "<#",
                    ".SYNOPSIS",
                    "    Smart Ticket remediation script for high memory usage.",
                    "",
                    ".DESCRIPTION",
                    "    Reports back diagnostic information related to memory usage.",
                    "    Supported: Yes",
                    "    Keywords: faws,memory,high,smarttickets",
                    "    Prerequisites: No",
                    "    Makes changes: No",
                    "",
                    ".INPUTS",
                    "    None",
                    "",
                    ".OUTPUTS",
                    "    System information and top process list sorted by WorkingSet64",
                    "",
                    "#>",
                    "",
                    "$Results = {{ResultCount}}",
                    "",
                    "try {",
                    "",
                    "    $AppPools = @{}",
                    "    $AppCmd = \"C:\\Windows\\system32\\inetsrv\\appcmd.exe\"",
                    "    if (Test-Path $AppCmd) {",
                    "        $wps_list = \"$AppCmd list wps\" | Invoke-Expression",
                    "        if ($wps_list -is [system.array] -and $wps_list.Count -ge 2) {",
                    "            $wps_list | ForEach-Object {",
                    "                $null = $_ -match \"WP \\\"\"([0-9]+)\\\"\" \\(applicationPool:(.*)\\)\"",
                    "                $AppPools[$matches[1]] = $matches[2]",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    # Get PageFile and System details.",
                    "    $PageFileUsage = Get-CimInstance -ClassName 'Win32_PageFileUsage' -Namespace 'root\\CIMV2' -ErrorAction Stop",
                    "    $ComputerSystem = Get-CimInstance -ClassName 'Win32_ComputerSystem' -Namespace 'root\\CIMV2' -ErrorAction Stop",
                    "    $PhysicalMemory = [math]::round($ComputerSystem.TotalPhysicalMemory / 1GB, 2)",
                    "",
                    "    # Format System details",
                    "    $outputObject = New-Object PSObject -Property @{",
                    "        ComputerName = $ComputerSystem.Name;",
                    "        PageFile = $PageFileUsage.Name;",
                    "        AutomaticManagedPagefile = $ComputerSystem.AutomaticManagedPagefile",
                    "        AllocatedBaseSize_MB = $PageFileUsage.AllocatedBaseSize;",
                    "        PeakUsage_MB = $PageFileUsage.PeakUsage;",
                    "        CurrentUsage_MB = $PageFileUsage.CurrentUsage;",
                    "        isTempPageFile = $PageFileUsage.TempPageFile",
                    "        InstallDate = $PageFileUsage.InstallDate",
                    "        TotalPhysicalMemory = \"$($PhysicalMemory)GB\"",
                    "    } | Select-Object ComputerName, PageFile, AutomaticManagedPagefile, AllocatedBaseSize_MB, PeakUsage_MB, CurrentUsage_MB, isTempPageFile, InstallDate, TotalPhysicalMemory",
                    "",
                    "    # Output System Details",
                    "    $outputObject | Format-List | Out-String",
                    "",
                    "    # Output top {{ResultCount}} processes based on WorkingSet",
                    "    $Processes = Get-Process | Sort WS -Descending | Select-Object -First $Results",
                    "    $Services = gwmi Win32_service | Where-Object {$_.Started -eq \"True\" -and $_.ServiceType -eq \"Share Process\"} | Select-Object Name, ProcessId",
                    "",
                    "    foreach ($Process in $Processes) {",
                    "        $Process | Add-Member -type NoteProperty -Name \"Services\" -Value (($Services | Where-Object {$_.ProcessId -eq $Process.Id}).Name -join \", \")",
                    "        $Process | Add-Member -type NoteProperty -Name \"ApplicationPool\" -Value $AppPools[\"$($Process.ID)\"]",
                    "    }",
                    "    $ProcessTable = $Processes | Select-Object Handles,",
                    "    @{Label = \"NPM(K)\"; Expression = {[int]($_.NPM / 1024)}},",
                    "    @{Label = \"PM(K)\"; Expression = {[int]($_.PM / 1024)}},",
                    "    @{Label = \"WS(K)\"; Expression = {[int]($_.WS / 1024)}},",
                    "    @{Label = \"VM(M)\"; Expression = {[int]($_.VM / 1MB)}},",
                    "    @{Label = \"CPU(s)\"; Expression = {if ($_.CPU) {$_.CPU.ToString(\"N\")}}},",
                    "    Id, ProcessName, ApplicationPool, Services | Format-Table -AutoSize -Wrap | Out-String -Width 120",
                    "    $ProcessTable -split \"`n\" | ForEach-Object {$_.trimend()}",
                    "",
                    "    $w3wp = Get-Process -Name w3wp -ErrorAction SilentlyContinue | Select-Object Id,",
                    "    @{Label = \"ApplicationPool\"; Expression = {$AppPools[\"$($_.ID)\"]}},",
                    "    Handles,",
                    "    @{Label = \"NPM(K)\"; Expression = {[int]($_.NPM / 1024)}},",
                    "    @{Label = \"PM(K)\"; Expression = {[int]($_.PM / 1024)}},",
                    "    @{Label = \"WS(K)\"; Expression = {[int]($_.WS / 1024)}},",
                    "    @{Label = \"VM(M)\"; Expression = {[int]($_.VM / 1MB)}},",
                    "    @{Label = \"CPU(s)\"; Expression = {if ($_.CPU) {$_.CPU.ToString(\"N\")}}},",
                    "    SI",
                    "",
                    "    if ($w3wp) {",
                    "        Write-Output (\"=\" * 10) \"IIS Application Pool processes\" (\"=\" * 10)",
                    "        ($w3wp | Format-Table -AutoSize -Wrap | Out-String -Width 120) -split \"`n\" | ForEach-Object {$_.trimend()}",
                    "    }",
                    "}",
                    "catch {",
                    "    Write-Output \"Error encountered: $($_.Exception.Message)\"",
                    "    exit 1",
                    "}"
                ],
                "timeoutSeconds": "7200"
            },
            "name": "WindowsMemoryScan",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Windows"
                ]
            }
        }
    ]
}
